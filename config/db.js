// import pkg from 'pg';
// import chalk from 'chalk';

// const { Pool } = pkg;

// // Replace [YOUR-PASSWORD] with your actual password

// const postgresql = "postgresql://postgres.lkvwezsadxzpxnwqlznv:rwandarwejotuyizerehonoreofficalweb1234@aws-1-eu-north-1.pooler.supabase.com:6543/postgres";

// const db = new Pool({
//     connectionString: postgresql,
//     ssl: {
//         rejectUnauthorized: false, // needed for some cloud providers like Supabase
//     },
// });

// db.connect((err) => {
//     if (err) {
//         console.error(chalk.red("Database connection failed: " + err));
//         return;
//     }
//     console.log(chalk.yellow("Database successfully connected"));
// });

// export default db;


// db.js
import { Pool } from 'pg';
import chalk from 'chalk';
import dotenv from 'dotenv';

dotenv.config();

// PostgreSQL connection string (can also put in .env)
const postgresql =
  "postgresql://postgres.lkvwezsadxzpxnwqlznv:rwandarwejotuyizerehonoreofficalweb1234@aws-1-eu-north-1.pooler.supabase.com:6543/postgres";

// Connect to PostgreSQL
const db = new Pool({
  connectionString: postgresql,
  ssl: { rejectUnauthorized: false }, // required for Supabase
});

// Hardcoded schema statements
const statements = [
  `CREATE TABLE IF NOT EXISTS "4k_values" (
    "image" varchar(200) NOT NULL,
    "description" varchar(200) NOT NULL,
    "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    PRIMARY KEY ("id")
  );`,
  `CREATE TABLE IF NOT EXISTS "admin" (
    "id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "fname" varchar(100) NOT NULL,
    "lname" varchar(100) NOT NULL,
    "email" varchar(100) NOT NULL,
    "password" varchar(100) NOT NULL,
    "access_code" integer NOT NULL,
    "is_locked" boolean DEFAULT FALSE,
    PRIMARY KEY ("id")
  );`,
  `CREATE TABLE IF NOT EXISTS "category" (
    "cat" varchar(100) NOT NULL,
    "cat_id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "id" varchar(100) NOT NULL,
    PRIMARY KEY ("cat_id")
  );`,
  `CREATE TABLE IF NOT EXISTS "home" (
    "id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "title" varchar(100) NOT NULL,
    "description" varchar(100) NOT NULL,
    "image" varchar(200) NOT NULL,
    "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY ("id")
  );`,
  `CREATE TABLE IF NOT EXISTS "internship" (
    "id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "icon" varchar(200) NOT NULL,
    "title" varchar(200) NOT NULL,
    "description" varchar(200) NOT NULL,
    "requirement" varchar(240) NOT NULL,
    "duration" varchar(240) NOT NULL,
    "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY ("id")
  );`,
  `CREATE TABLE IF NOT EXISTS "mission" (
    "image" varchar(200) NOT NULL,
    "description" varchar(200) NOT NULL,
    "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "title_of_section" varchar(100) NOT NULL,
    PRIMARY KEY ("id")
  );`,
  `CREATE TABLE IF NOT EXISTS "partner" (
    "id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "image" varchar(200) NOT NULL,
    "title_name" varchar(200) NOT NULL,
    "description" varchar(200) NOT NULL,
    PRIMARY KEY ("id")
  );`,
  `CREATE TABLE IF NOT EXISTS "products" (
    "ID" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "image" varchar(200) NOT NULL,
    "title" varchar(100) NOT NULL,
    "description" varchar(200) NOT NULL,
    "price" integer NOT NULL,
    "features" varchar(200) NOT NULL,
    "style" varchar(200) NOT NULL,
    "quantity" integer NOT NULL,
    "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "category" varchar(100) NOT NULL,
    PRIMARY KEY ("ID")
  );`,
  `CREATE TABLE IF NOT EXISTS "product_related" (
    "ID" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "image" varchar(200) NOT NULL,
    "p_name" varchar(200) NOT NULL,
    "p_price" varchar(200) NOT NULL,
    "category" varchar(100) NOT NULL,
    PRIMARY KEY ("ID")
  );`,
  `CREATE TABLE IF NOT EXISTS "showcase" (
    "date" varchar(200) NOT NULL,
    "image" varchar(200) NOT NULL,
    "description" varchar(200) NOT NULL,
    "title" varchar(200) NOT NULL,
    "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    PRIMARY KEY ("id")
  );`,
  `CREATE TABLE IF NOT EXISTS "team" (
    "id" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY,
    "image" varchar(200) NOT NULL,
    "team_member" varchar(200) NOT NULL,
    "role" varchar(200) NOT NULL,
    PRIMARY KEY ("id")
  );`
];

// Function to apply schema safely with savepoints
export async function applyHardcodedSchema(db) {
  await db.query("BEGIN");
  try {
    for (let i = 0; i < statements.length; i++) {
      const stmt = statements[i];
      const sp = `sp_${i}`;
      await db.query(`SAVEPOINT ${sp}`);
      try {
        await db.query(stmt);
        await db.query(`RELEASE SAVEPOINT ${sp}`);
      } catch (err) {
        await db.query(`ROLLBACK TO SAVEPOINT ${sp}`);
        const ignorable = new Set(["42P07","42710","42701","42P16"]);
        if (!(err && (ignorable.has(err.code) || /already exists/i.test(err.message)))) {
          err.message = `SQL failed at statement #${i+1}:\n${stmt}\n\n${err.message}`;
          throw err;
        }
      }
    }
    await db.query("COMMIT");
  } catch (e) {
    await db.query("ROLLBACK");
    throw e;
  }
}

// Connect and apply schema immediately
(async () => {
  try {
    await db.connect();
    console.log(chalk.yellow("Database successfully connected"));
    await applyHardcodedSchema(db);
    console.log(chalk.green("All tables created successfully!"));
  } catch (err) {
    console.error(chalk.red("Error initializing database:"), err);
  } finally {
    await db.end(); // Close connection
  }
})();

export default db;
